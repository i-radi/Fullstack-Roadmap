// <auto-generated />
using System;
using Factory;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Factory.Migrations
{
    [DbContext(typeof(FactoryDbContext))]
    partial class FactoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("Factory.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<string>("CarType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CostPerHour")
                        .HasColumnType("float");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("GarageId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Cars", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GeoLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IDNumber")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Employees", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("GarageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garages", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Joins.EmployeeLineJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LineId");

                    b.ToTable("EmployeeLineJoin", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Joins.MaterialOrderJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("MaterialOrderJoin", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Joins.ShiftLineJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftLineJoin", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Lines", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("AverageCostPerHour")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Machines", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.MachinePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<double>("CostPerHour")
                        .HasColumnType("float");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineParts", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LineId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDateT")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductDetails", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<double>("StandardCost")
                        .HasColumnType("float");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SensorId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RawMaterials", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<double>("CostPerHour")
                        .HasColumnType("float");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Sensors", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.SensorDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SensorDataLogs", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shifts", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", "Factory");
                });

            modelBuilder.Entity("Factory.Entities.Car", b =>
                {
                    b.HasOne("Factory.Entities.Garage", "Garage")
                        .WithMany("Cars")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Supplier", "Supplier")
                        .WithMany("Cars")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garage");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Factory.Entities.Employee", b =>
                {
                    b.HasOne("Factory.Entities.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Factory.Entities.Joins.EmployeeLineJoin", b =>
                {
                    b.HasOne("Factory.Entities.Employee", "Employee")
                        .WithMany("EmployeeLineJoins")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Line", "Line")
                        .WithMany("EmployeeLineJoins")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Factory.Entities.Joins.MaterialOrderJoin", b =>
                {
                    b.HasOne("Factory.Entities.Order", "Order")
                        .WithMany("MaterialOrderJoins")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.RawMaterial", "RawMaterial")
                        .WithMany("MaterialOrderJoins")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Factory.Entities.Joins.ShiftLineJoin", b =>
                {
                    b.HasOne("Factory.Entities.Line", "Line")
                        .WithMany("ShiftLineJoins")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Shift", "Shift")
                        .WithMany("ShiftLineJoins")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Factory.Entities.Machine", b =>
                {
                    b.HasOne("Factory.Entities.Line", "Line")
                        .WithMany("Machines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Factory.Entities.MachinePart", b =>
                {
                    b.HasOne("Factory.Entities.Car", "Car")
                        .WithMany("MachineParts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Machine", "Machine")
                        .WithMany("MachineParts")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("Factory.Entities.Order", b =>
                {
                    b.HasOne("Factory.Entities.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Factory.Entities.Product", b =>
                {
                    b.HasOne("Factory.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Line", "Line")
                        .WithMany("Products")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Warehouse", "Warehouse")
                        .WithMany("products")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Line");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Factory.Entities.ProductDetail", b =>
                {
                    b.HasOne("Factory.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Warehouse", "Warehouse")
                        .WithMany("ProductDetails")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Factory.Entities.RawMaterial", b =>
                {
                    b.HasOne("Factory.Entities.Category", "Category")
                        .WithMany("RawMaterials")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Sensor", "Sensor")
                        .WithMany("RawMaterials")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Supplier", "Supplier")
                        .WithMany("RawMaterials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Sensor");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Factory.Entities.Sensor", b =>
                {
                    b.HasOne("Factory.Entities.Car", "Car")
                        .WithMany("Sensors")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Factory.Entities.SensorDataLog", b =>
                {
                    b.HasOne("Factory.Entities.Sensor", "Sensor")
                        .WithMany("SensorDataLogs")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.Entities.Warehouse", "Warehouse")
                        .WithMany("SensorDataLogs")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Factory.Entities.Car", b =>
                {
                    b.Navigation("MachineParts");

                    b.Navigation("Orders");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Factory.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Factory.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Factory.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeLineJoins");
                });

            modelBuilder.Entity("Factory.Entities.Garage", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Factory.Entities.Line", b =>
                {
                    b.Navigation("EmployeeLineJoins");

                    b.Navigation("Machines");

                    b.Navigation("Products");

                    b.Navigation("ShiftLineJoins");
                });

            modelBuilder.Entity("Factory.Entities.Machine", b =>
                {
                    b.Navigation("MachineParts");
                });

            modelBuilder.Entity("Factory.Entities.Order", b =>
                {
                    b.Navigation("MaterialOrderJoins");
                });

            modelBuilder.Entity("Factory.Entities.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Factory.Entities.RawMaterial", b =>
                {
                    b.Navigation("MaterialOrderJoins");
                });

            modelBuilder.Entity("Factory.Entities.Sensor", b =>
                {
                    b.Navigation("RawMaterials");

                    b.Navigation("SensorDataLogs");
                });

            modelBuilder.Entity("Factory.Entities.Shift", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ShiftLineJoins");
                });

            modelBuilder.Entity("Factory.Entities.Supplier", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Factory.Entities.Warehouse", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("products");

                    b.Navigation("SensorDataLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
